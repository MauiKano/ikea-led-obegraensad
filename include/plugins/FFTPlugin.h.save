#pragma once

#include "PluginManager.h"
#include <AudioTools.h>
#include <AudioLibs/AudioRealFFT.h> // or AudioKissFFT

 

class FFTPlugin : public Plugin {
public:
    FFTPlugin();

    void setup() override;
    void loop() override;
    const char* getName() const override;

    void teardown() override; // optional
    void websocketHook(DynamicJsonDocument &request) override; // optional
   // void fftResult(AudioFFTBase &fft);


private:
    AudioRealFFT      fft; // or any other supported inplementation
    AudioFFTConfig    tcfg;
    AnalogAudioStream Micadc; // Declare Micadc as an external instance
    AnalogConfig      cfgRxM; // Declare cfgRxM as an external variable
    StreamCopy        copierMic2FFT; // (AudioRealFFT, AnalogAudioStream);  //  (AudioRealFFT fft, AnalogAudioStream Micadc) ;
    //   extern   ConverterAutoCenter; // set avg to 0
        static void fftResult(audio_tools::AudioFFTBase& fft);
};